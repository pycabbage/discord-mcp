name: Build Docker Image

on:
  push:
    branches:
      - main
    paths-ignore:
      - "*.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "*.md"
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Discord MCP
            org.opencontainers.image.description=A Model Context Protocol (MCP) server that integrates with Discord
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://github.com/${{ github.repository.url }}
            org.opencontainers.image.source=https://github.com/${{ github.repository.url }}
            org.opencontainers.image.url=https://github.com/${{ github.repository.url }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        id: push
        with:
          push: true
          outputs: type=registry,oci-mediatypes=true,compression=zstd,compression-level=22,force-compression=true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          target: final
          sbom: true
          provenance: true
      - name: Attest
        uses: actions/attest-build-provenance@v2
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
